name: Build Core
on:
  push:
    branches:
      - v3
    tags:
      - v3.*
    paths-ignore:
      - '.github/workflows/release.yml'
      - '.github/workflows/pr.yml'
      - '.github/workflows/tester.yml'
      - '.github/workflows/formatter.yml'
  pull_request:
    branches:
      - v3
    paths-ignore:
      - 'client/frontend/src/lang/**.json'

env:
  SWAG_VERSION: "1.16.2"
  GO_VERSION: "1.21"
  NODE_VERSION: "18"
  TINYGO_VERSION: "0.28.1"
  TAG: formatter
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

concurrency:
  group: ${{ github.event_name}}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-shared:
    name: Build Shared Objects
    runs-on: ubuntu-20.04
    if: "startsWith(github.ref, 'refs/tags/v') || !contains(github.event.head_commit.message, '[skip]')"

    timeout-minutes: 10

    steps:
      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ^${{ env.GO_VERSION }}

      - name: Check out code into the Go module directory
        uses: actions/checkout@v3

      - name: Restore yarn cache
        uses: actions/cache@v3
        with:
          path: ~/.yarn
          key: ${{ runner.os }}-nodemodules-${{ env.NODE_VERSION }}-${{ hashFiles('client/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-nodemodules-${{ env.NODE_VERSION }}-

      - name: Restore yarn cache
        uses: actions/cache@v3
        with:
          path: |
            client/node_modules
            client/api/node_modules
            client/frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('client/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Restore Go Modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ env.GO_VERSION }}-

      - name: Restore Go BIN
        uses: actions/cache@v3
        with:
          path: |
            ~/go/bin
          key: ${{ runner.os }}-swag-${{ env.SWAG_VERSION }}
          restore-keys: |
            ${{ runner.os }}-swag-

      - name: Download Go Binaries
        run: |
          wget https://github.com/swaggo/swag/releases/download/v${{ env.SWAG_VERSION }}/swag_${{ env.SWAG_VERSION }}_Linux_x86_64.tar.gz
          mkdir -p ~/go/bin
          tar -zxf swag*.tar.gz -C ~/go/bin
          rm -rf swag*.tar.gz

      - name: Generate Swagger Docs
        run: |
          go mod download
          ~/go/bin/swag init --md . -o web/swagger -g web/loader.go

      - name: yarn install, build
        run: |
          npm install -g yarn
          yarn install
          yarn build
        env:
          CI: true
        working-directory: client

      - name: Upload Swagger docs
        uses: actions/upload-artifact@v3
        with:
          name: pufferpanel_swagger
          path: |
            web/swagger/swagger.json
            web/swagger/swagger.yaml
          if-no-files-found: error

      - name: Generate folders and remove excess files
        run: |
          rm -rf .git .github web/swagger/swagger.json web/swagger/swagger.yaml build-artifacts/client/frontend/dist/*.map
          zip -r pufferpanel_build_artifact.zip *          

      - name: Generate job artifact
        uses: actions/upload-artifact@v3
        with:
          name: pufferpanel_build_artifact
          path: pufferpanel_build_artifact.zip
          if-no-files-found: error
          retention-days: 1

  build-windows-amd64-binaries:
    name: Build Binaries - Windows AMD64
    runs-on: ubuntu-20.04
    needs: [ 'build-shared' ]

    timeout-minutes: 10

    steps:
      - name: Get the version
        run: echo "VERSION=0.0.${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV

      - name: Get the version
        if: startsWith(github.ref, 'refs/tags/v')
        run: echo "VERSION=${GITHUB_REF/refs\/tags\/v/}" >> $GITHUB_ENV

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ^${{ env.GO_VERSION }}

      - uses: actions/download-artifact@v2
        with:
          name: pufferpanel_build_artifact

      - name: Unzip archive
        run: |
          unzip pufferpanel_build_artifact.zip

      - name: Download APT packages
        run: |
          sudo apt-get update
          sudo apt-get install --download-only -y gcc-mingw-w64

      - name: APT Install
        run: |
          sudo apt-get install -y gcc-mingw-w64

      - name: Build Windows
        run: |
          go build -o build-artifacts/pufferpanel.exe -ldflags "-X 'github.com/pufferpanel/pufferpanel/v3.Hash=${{ github.sha }}' -X 'github.com/pufferpanel/pufferpanel/v3.Version=${{ env.VERSION }}'" -v github.com/pufferpanel/pufferpanel/v3/cmd
        env:
          GOOS: windows
          GOARCH: amd64
          CC: x86_64-w64-mingw32-gcc
          CXX: x86_64-w64-mingw32-g++
          CGO_ENABLED: 1

      - name: Publish Artifacts
        uses: actions/upload-artifact@v1
        with:
          name: pufferpanel_${{ env.VERSION }}_windows_amd64
          path: build-artifacts/

  build-windows-installer:
    name: Build Windows Installer
    runs-on: windows-latest
    needs: [ 'build-windows-amd64-binaries' ]

    timeout-minutes: 10
    
    steps:
      - name: Get the version
        run: |
          $VERSION="0.0.${{ github.run_number }}"
          if ("${{ github.ref }}".startsWith("refs/tags/v")) {
            $VERSION="${{ github.ref }}".substring('refs/tags/v'.length)
          }
          echo VERSION=$VERSION | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append

      - uses: actions/download-artifact@v3
        with:
          name: pufferpanel_${{ env.VERSION }}_windows_amd64
          path: binaries

      - uses: actions/download-artifact@v3
        with:
          name: pufferpanel_build_artifact
          path: artifacts

      - name: Unzip archive
        run: |
          cd artifacts
          unzip pufferpanel_build_artifact.zip

      - name: Generate MSI
        run: |
          Copy-Item -Recurse -Path binaries\* -Destination .
          Copy-Item -Path artifacts\LICENSE.rtf -Destination .
          Copy-Item -Path artifacts\installer.wxs -Destination .
          Copy-Item -Path artifacts\client\frontend\public\favicon.ico -Destination .
          $env:Path += ";C:\Program Files (x86)\WiX Toolset v3.11\bin"
          candle *.wxs -arch x64 -dProductVersion="${{ env.VERSION }}" -ext WixFirewallExtension
          light *.wixobj -out pufferpanel.msi -b email -b www -ext WixUIExtension -ext WixFirewallExtension -cultures:en-us

      - name: Publish Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: pufferpanel_${{ env.VERSION }}_installer.msi
          path: pufferpanel.msi

  build-linux-amd64-binaries:
    name: Build Binaries - Linux AMD64
    runs-on: ubuntu-20.04
    needs: [ 'build-shared' ]

    timeout-minutes: 10

    steps:
      - name: Get the version
        run: echo "VERSION=0.0.${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV

      - name: Get the version
        if: startsWith(github.ref, 'refs/tags/v')
        run: echo "VERSION=${GITHUB_REF/refs\/tags\/v/}" >> $GITHUB_ENV

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ^${{ env.GO_VERSION }}

      - name: Download APT packages
        run: |
          sudo apt-get update
          sudo apt-get install --download-only -y rpm

      - name: APT Install
        run: |
          sudo apt-get install -y rpm

      - uses: actions/download-artifact@v2
        with:
          name: pufferpanel_build_artifact

      - name: Unzip archive
        run: |
          unzip pufferpanel_build_artifact.zip

      - name: Restore Go Modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ env.GO_VERSION }}

      - name: Build Linux
        run: |
          go build -o build-artifacts/pufferpanel -ldflags "-X 'github.com/pufferpanel/pufferpanel/v3.Hash=${{ github.sha }}' -X 'github.com/pufferpanel/pufferpanel/v3.Version=${{ env.VERSION }}'" -v github.com/pufferpanel/pufferpanel/v3/cmd
          go test -v ./...
        env:
          GOOS: linux
          GOARCH: amd64

      - name: Set up build folder
        run: |
          mkdir -p DEBBUILD/usr/sbin DEBBUILD/var/www/pufferpanel
          mkdir -p DEBBUILD/var/log/pufferpanel RPMBUILD/var/log/pufferpanel
          mkdir -p DEBBUILD/etc/pufferpanel DEBBUILD/lib/systemd/system/
          mkdir -p DEBBUILD/var/lib/pufferpanel/binaries RPMBUILD/var/lib/pufferpanel
          mkdir -p DEBBUILD/etc/profile.d/
          cp config.linux.json DEBBUILD/etc/pufferpanel/config.json
          cp build-artifacts/pufferpanel DEBBUILD/usr/sbin/pufferpanel
          cp systemd/servicefiles/pufferpanel.service DEBBUILD/lib/systemd/system/pufferpanel.service
          cp systemd/profile.d/pufferpanel.sh DEBBUILD/etc/profile.d/pufferpanel.sh

      - name: Build Package DEB AMD64
        id: debamd64
        uses: pufferpanel/build-deb@master
        with:
          data-folder: DEBBUILD
          package: pufferpanel
          version: ${{ env.VERSION }}
          license: Apache 2.0
          architecture: amd64
          maintainer: PufferPanel <dev@pufferpanel.com>
          homepage: https://pufferpanel.com
          description: Game management server panel
          before-install: systemd/scripts/preinstall.sh
          after-install: systemd/scripts/postinstall.sh
          before-upgrade: systemd/scripts/preupgrade.sh
          after-upgrade: systemd/scripts/postupgrade.sh
          before-remove: systemd/scripts/preremove.sh
          after-remove: systemd/scripts/postremove.sh
          after-purge: systemd/scripts/purge.sh
          user: pufferpanel
          group: pufferpanel
          suggested-packages: |
            lib32gcc1

      - name: Build Package RPM AMD64
        id: rpmamd64
        uses: pufferpanel/build-rpm@master
        with:
          package: pufferpanel
          version: ${{ env.VERSION }}
          license: Apache 2.0
          architecture: x86_64
          maintainer: PufferPanel <dev@pufferpanel.com>
          website: https://pufferpanel.com
          summary: Game management server panel
          before-install: systemd/scripts/preinstall.sh
          after-install: systemd/scripts/postinstall.sh
          before-upgrade: systemd/scripts/preupgrade.sh
          after-upgrade: systemd/scripts/postupgrade.sh
          before-remove: systemd/scripts/preremove.sh
          after-remove: systemd/scripts/postremove.sh
          after-purge: systemd/scripts/purge.sh
          user: pufferpanel
          group: pufferpanel
          files: |
            build-artifacts/pufferpanel:/usr/sbin/pufferpanel
            config.linux.json:/etc/pufferpanel/config.json
            systemd/servicefiles/pufferpanel.service:/lib/systemd/system/pufferpanel.service
            systemd/profile.d/pufferpanel.sh:/etc/profile.d/pufferpanel.sh
            RPMBUILD/var/lib/pufferpanel:/var/lib/pufferpanel
            RPMBUILD/var/log/pufferpanel:/var/log/pufferpanel
          config: |
            /etc/pufferpanel/config.json:noreplace
          suggested-packages: |
            glibc.i686
            libstdc++.i686

      - name: Publish Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: pufferpanel_${{ env.VERSION }}_linux_amd64
          path: build-artifacts/

      - name: Publish Artifacts
        uses: actions/upload-artifact@v1
        with:
          name: pufferpanel_${{ env.VERSION }}_amd64.deb
          path: pufferpanel_${{ env.VERSION }}_amd64.deb

      - name: Publish Artifacts
        uses: actions/upload-artifact@v1
        with:
          name: pufferpanel-${{ env.VERSION }}-1.x86_64.rpm
          path: ${{ steps.rpmamd64.outputs.file }}

  build-linux-arm64-binaries:
    name: Build Binaries - Linux ARM64
    runs-on: ubuntu-20.04
    needs: [ 'build-shared' ]

    timeout-minutes: 10

    steps:
      - name: Get the version
        run: echo "VERSION=0.0.${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV

      - name: Get the version
        if: startsWith(github.ref, 'refs/tags/v')
        run: echo "VERSION=${GITHUB_REF/refs\/tags\/v/}" >> $GITHUB_ENV

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ^${{ env.GO_VERSION }}

      - uses: actions/download-artifact@v3
        with:
          name: pufferpanel_build_artifact

      - name: Unzip archive
        run: |
          unzip pufferpanel_build_artifact.zip

      - name: Download APT packages
        run: |
          sudo apt-get update
          sudo apt-get install --download-only -y gcc-aarch64-linux-gnu

      - name: APT Install
        run: |
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Restore Go Modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ env.GO_VERSION }}

      - name: Build ARM64
        run: |
          go build -o build-artifacts/pufferpanel -ldflags "-X 'github.com/pufferpanel/pufferpanel/v3.Hash=${{ github.sha }}' -X 'github.com/pufferpanel/pufferpanel/v3.Version=${{ env.VERSION }}'" -v github.com/pufferpanel/pufferpanel/v3/cmd
        env:
          GOOS: linux
          GOARCH: arm64
          CC: aarch64-linux-gnu-gcc
          CGO_ENABLED: 1

      - name: Set up build folder
        run: |
          mkdir -p DEBBUILD/usr/sbin DEBBUILD/var/www/pufferpanel
          mkdir -p DEBBUILD/var/log/pufferpanel DEBBUILD/etc/pufferpanel DEBBUILD/lib/systemd/system/
          mkdir -p DEBBUILD/var/lib/pufferpanel/binaries
          mkdir -p DEBBUILD/etc/profile.d
          cp config.linux.json DEBBUILD/etc/pufferpanel/config.json
          cp build-artifacts/pufferpanel DEBBUILD/usr/sbin/pufferpanel
          cp systemd/servicefiles/pufferpanel.service DEBBUILD/lib/systemd/system/pufferpanel.service
          cp systemd/profile.d/pufferpanel.sh DEBBUILD/etc/profile.d/pufferpanel.sh

      - name: Build Package DEB ARM64
        id: debarm64
        uses: pufferpanel/build-deb@master
        with:
          data-folder: DEBBUILD
          package: pufferpanel
          version: ${{ env.VERSION }}
          license: Apache 2.0
          architecture: arm64
          maintainer: PufferPanel <dev@pufferpanel.com>
          homepage: https://pufferpanel.com
          description: Game management server panel
          before-install: systemd/scripts/preinstall.sh
          after-install: systemd/scripts/postinstall.sh
          before-upgrade: systemd/scripts/preupgrade.sh
          after-upgrade: systemd/scripts/postupgrade.sh
          before-remove: systemd/scripts/preremove.sh
          after-remove: systemd/scripts/postremove.sh
          after-purge: systemd/scripts/purge.sh
          user: pufferpanel
          group: pufferpanel
          suggested-packages: |
            lib32gcc1

      - name: Publish Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: pufferpanel_${{ env.VERSION }}_linux_arm64
          path: build-artifacts

      - name: Publish Artifacts
        uses: actions/upload-artifact@v1
        with:
          name: pufferpanel_${{ env.VERSION }}_arm64.deb
          path: pufferpanel_${{ env.VERSION }}_arm64.deb

  cleanup:
    runs-on: ubuntu-20.04
    name: "Cleanup"

    if: ${{ always() }}
    needs: [ build-shared, build-windows-amd64-binaries, build-windows-installer, build-linux-amd64-binaries, build-linux-arm64-binaries ]

    continue-on-error: true

    steps:
      - name: Delete artifacts
        uses: geekyeggo/delete-artifact@v2
        with:
          name: pufferpanel_build_artifact

  build-docker-image-base:
    runs-on: ubuntu-20.04
    name: "Build Docker image"
    if: "startsWith(github.ref, 'refs/tags/v') || !contains(github.event.head_commit.message, '[skip]')"
    strategy:
      matrix:
        platform: [ "linux/amd64" ]
    permissions:
      contents: read
      packages: write
    environment: ${{ startsWith(github.ref, 'refs/tags/') && 'Release' || 'Development' }}

    timeout-minutes: 10

    env:
      REGISTRY: ${{ vars.REGISTRY == 'docker.com' && '' || vars.REGISTRY }}
      REGISTRY_USERNAME: ${{ vars.REGISTRY == 'ghcr.io' && github.actor || vars.REGISTRY_USERNAME }}
      REGISTRY_PASSWORD: ${{ vars.REGISTRY == 'ghcr.io' && secrets.GITHUB_TOKEN || vars.REGISTRY_PASSWORD }}

    steps:
      - name: Ensure mask
        id: values
        run: |
          echo "::add-mask::$REGISTRY_USERNAME"
          echo "::add-mask::$REGISTRY_PASSWORD"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      - name: Login to DockerHub
        if: ${{ env.REGISTRY_USERNAME != '' }}
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: |
            name=${{ env.REGISTRY != '' && format('{0}/', env.REGISTRY) || '' }}${{ env.IMAGE_NAME }},enable=${{ env.REGISTRY != '' }}
            name=${{ env.IMAGE_NAME }},enable=${{ env.REGISTRY == '' }}
          tags: |
            type=ref,prefix=branch-,event=branch
            type=semver,pattern={{version}}

      - name: Check out code into the Go module directory
        uses: actions/checkout@v3

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: .
          file: Dockerfile
          push: ${{ github.event_name != 'pull_request' && env.REGISTRY_USERNAME != '' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            sha: ${{ github.sha }}
            version: ${{ env.VERSION }}
          platforms: ${{ matrix.platform }}

  release:
    name: "Deployment"
    runs-on: ubuntu-latest
    needs:
      - build-docker-image-base
      - build-windows-amd64-binaries
      - build-windows-installer
      - build-linux-amd64-binaries
      - build-linux-arm64-binaries
    if: "startsWith(github.ref, 'refs/tags/')"
    permissions:
      contents: write
    environment: ${{ startsWith(github.ref, 'refs/tags/') && 'Release' || 'Development' }}

    env:
      PACKAGECLOUD_REPO: pufferpanel/pufferpanel

    steps:
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.6

      - name: Install gems
        run: |
          gem install --no-doc package_cloud

      # download it all, we'll grab what we need
      - uses: actions/download-artifact@v3

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            *.zip
            *.rpm
            *.deb
            *.msi

      - name: Push to repo
        env:
          PACKAGECLOUD_TOKEN: ${{ secrets.PACKAGECLOUD_TOKEN }}
        run: |
          package_cloud push ${{ env.PACKAGECLOUD_REPO }}/any/any pufferpanel_*_amd64.deb 
          package_cloud push ${{ env.PACKAGECLOUD_REPO }}/any/any pufferpanel_*_arm64.deb 
          package_cloud push ${{ env.PACKAGECLOUD_REPO }}/rpm_any/rpm_any pufferpanel-*.x86_64.rpm 
